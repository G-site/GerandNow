from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramAPIError


from app.database import check_admin, get_users
import app.keyboards as kb


admin_router = Router()


@admin_router.message(Command('admin'))
async def admin(message: Message):
    tg_id = message.from_user.id
    name = message.from_user.first_name
    status = await check_admin(tg_id)

    if status == 'Creator':
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, <b>{name}</b>!", reply_markup=kb.admin_menu, parse_mode="HTML")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@admin_router.callback_query(F.data == 'download_static')
async def static_download(callback: CallbackQuery):
    try:
        file = FSInputFile('database.db')
        await callback.message.answer_document(file, caption="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö üìÇ")
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ë–î: {e}")


@admin_router.callback_query(F.data == 'message3')
async def subscribe(callback: CallbackQuery):
    users = await get_users()
    sent = 0
    for tg_id in users:
        try:
            await callback.bot.send_message(
                chat_id=tg_id,
                text="<b>üî• –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –≤–∞–∂–Ω–æ–µ!</b>\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã üéÅ",
                parse_mode="HTML",
                reply_markup=kb.subscribe
            )
            sent += 1
        except TelegramAPIError as e:
            print(f"–û—à–∏–±–∫–∞, –Ω–µ –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {e}")
    await callback.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")


@admin_router.callback_query(F.data == 'message2')
async def share(callback: CallbackQuery):
    users = await get_users()
    sent = 0
    for tg_id in users:
        try:
            await callback.bot.send_message(
                chat_id=tg_id,
                text="<b>ü§ñ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç?</b>\n\n<i>–ü–æ–¥–µ–ª–∏—Å—å –∏–º —Å –¥—Ä—É–≥–æ–º, —á—Ç–æ–±—ã –∏ –æ–Ω –º–æ–≥ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!</i>\n\n",
                parse_mode="HTML",
                reply_markup=kb.share
            )
            sent += 1
        except TelegramAPIError as e:
            print(f"–û—à–∏–±–∫–∞, –Ω–µ –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {e}")
    await callback.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")


@admin_router.callback_query(F.data == 'message1')
async def tech(callback: CallbackQuery):
    users = await get_users()
    sent = 0
    for tg_id in users:
        try:
            await callback.bot.send_message(
                chat_id=tg_id,
                text="<b>üîß –í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–æ <b>—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</b> —Å–µ—Ä–≤–∏—Å–∞.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!",
                parse_mode="HTML"
            )
            sent += 1
        except TelegramAPIError as e:
            print(f"–û—à–∏–±–∫–∞, –Ω–µ –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {e}")
    await callback.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
